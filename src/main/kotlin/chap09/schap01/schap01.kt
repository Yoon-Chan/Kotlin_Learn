package chap09.schap01

fun main() {

}


fun c1(){
    /*
    *   제네릭스는 사용자가 알지 못하는 타입의 데이터를 조작하는 코드를
    *   작성할 수 있게 해주는 코틀린 타입 시스템이 제공하는 강력한 기능이다.
    *
    *   타입 파라미터
    *       - 코드를 더 일반화해서 더 유연하게 만드는 방법과 코틀린 타입 시스템의
    *         고급 기능을 사용하는 방법을 설명한다.
    *
    *   제네릭 선언
    *       - 어떤 선언을 제네릭 선언으로 만들려면 하나 이상의 타입 파라미터를 추가해야 한다.
    *         이렇게 추가한 타입 파라미터를 선언 내부에서는 일반적인 타입 대신 사용할 수 있다.
    *       - 컴파일러가 문맥에서 타입 인자의 타입을 추론할 수 있으면 타입 인자를 생략할 수 있는 경우도 있다.
    *

    *
    * */

    //일반 제네릭 선언
    val map = HashMap<Int, String>()
    val list = arrayListOf<String>()

    //타입 추론 선언
    val map2 : Map<Int, String> = HashMap()
    val list2 = arrayListOf("abc", "def")



}